{"ast":null,"code":"const intro = `The AI Sudoku Solver is created using the two JavaScript libraries, React.js and Node.js, for the front-end and back-end respectively. The application solves \nsudokus using artificial intelligence, more specifically, an evolutionary algorithm. These algorithms are based on the main evolutionary theory of Charles Darwin - the\nexistence of a population of individuals exposed to environmental pressure, which leads to natural selection. How this theory can be applied to solving sudokus is explained \nbelow.`;\nconst initialization = `The initial population, also known as generation 0, is 15000 different random solutions to the proposed sudoku. Each empty square is given a random\ndigit between 1 and 9. The higher the population size the greater the chance of success but, time of execution will also increase.`;\nconst evaluation = `Each sudoku is given a fitness rating by using a fitness function. The fitness function of the sudoku solver counts how many duplicate numbers there\nare in each column and subgrid (the rows have the correct amount of each numbers in them due to implementation). The lower the count the fitter the solution is.`;\nconst selection = `The next step is to select the a portion of the current generation to be parents for the next generation. A total of 1500 parents will be chosen (10 \npercent), the best 1350 solutions and a further 150 random solutions (this keeps diversity within the within the population.). These will be bread to create the\nnext generation of solutions.`;\nexport default [intro, initialization, evaluation, selection];","map":{"version":3,"sources":["/Users/ben/SudokuSolver/client/src/Components/About/text.js"],"names":["intro","initialization","evaluation","selection"],"mappings":"AAAA,MAAMA,KAAK,GAAI;;;OAAf;AAKA,MAAMC,cAAc,GAAI;mIAAxB;AAGA,MAAMC,UAAU,GAAI;iKAApB;AAGA,MAAMC,SAAS,GAAI;;8BAAnB;AAKA,eAAe,CAACH,KAAD,EAAQC,cAAR,EAAwBC,UAAxB,EAAoCC,SAApC,CAAf","sourcesContent":["const intro = `The AI Sudoku Solver is created using the two JavaScript libraries, React.js and Node.js, for the front-end and back-end respectively. The application solves \nsudokus using artificial intelligence, more specifically, an evolutionary algorithm. These algorithms are based on the main evolutionary theory of Charles Darwin - the\nexistence of a population of individuals exposed to environmental pressure, which leads to natural selection. How this theory can be applied to solving sudokus is explained \nbelow.`\n\nconst initialization = `The initial population, also known as generation 0, is 15000 different random solutions to the proposed sudoku. Each empty square is given a random\ndigit between 1 and 9. The higher the population size the greater the chance of success but, time of execution will also increase.`\n\nconst evaluation = `Each sudoku is given a fitness rating by using a fitness function. The fitness function of the sudoku solver counts how many duplicate numbers there\nare in each column and subgrid (the rows have the correct amount of each numbers in them due to implementation). The lower the count the fitter the solution is.`\n\nconst selection = `The next step is to select the a portion of the current generation to be parents for the next generation. A total of 1500 parents will be chosen (10 \npercent), the best 1350 solutions and a further 150 random solutions (this keeps diversity within the within the population.). These will be bread to create the\nnext generation of solutions.`\n\n\nexport default [intro, initialization, evaluation, selection]\n"]},"metadata":{},"sourceType":"module"}