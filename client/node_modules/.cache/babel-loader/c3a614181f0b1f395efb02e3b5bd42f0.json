{"ast":null,"code":"var _jsxFileName = \"/Users/ben/SudokuSolver/client/src/Components/Solver/index.js\";\nimport React from 'react';\nimport Sudoku from './sudoku';\nimport NumberButtons from './numberButtons';\nimport ActionButtons from './actionButtons';\nimport axios from 'axios';\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateThenSolve = () => {\n      axios.post(\"http://localhost:9000/api/validate\", {\n        grid: this.state.sudoku\n      }).then(res => {\n        if (res.data) this.solveOnServer();else this.setState({\n          response: \"Invalid Grid\"\n        });\n      });\n    };\n\n    this.newRandomGrid = () => {\n      axios.get(\"http://localhost:9000/api/random\").then(res => {\n        this.setState({\n          sudoku: res.data\n        });\n        this.setState({\n          resetState: res.data\n        });\n      });\n    };\n\n    this.solveOnServer = () => {\n      this.setState({\n        response: \"Loading...\"\n      });\n      this.setState({\n        resetState: this.state.sudoku\n      });\n      axios.post(\"http://localhost:9000/api/solver\", {\n        grid: this.state.sudoku\n      }).then(res => {\n        this.setState({\n          sudoku: res.data[0]\n        });\n        this.setMessage(res.data[1]);\n      });\n    };\n\n    this.setMessage = errorNum => {\n      if (errorNum === 0) this.setState({\n        response: \"Solution Found!\"\n      });else this.setState({\n        response: \"Could not find solution. Number of errors: \" + errorNum\n      });\n    };\n\n    this.setSelected = newSelected => {\n      document.getElementById(\"i\" + this.state.selected).setAttribute(\"style\", \"background-color: none\");\n      this.setState({\n        selected: newSelected\n      });\n      document.getElementById(\"i\" + newSelected).setAttribute(\"style\", \"background-color: #dee2e6\");\n    };\n\n    this.changeNumber = number => {\n      var newSudoku = [...this.state.sudoku];\n      newSudoku[this.state.selected] = number;\n      this.setState({\n        sudoku: newSudoku\n      });\n    };\n\n    this.clearGrid = () => {\n      var newSudoku = [...this.state.sudoku].map(elem => \" \");\n      this.setState({\n        sudoku: newSudoku\n      });\n    };\n\n    this.resetGrid = () => {\n      this.setState({\n        sudoku: this.state.resetState\n      });\n    };\n\n    this.componentDidMount = () => {\n      document.getElementById(\"i\" + this.state.selected).setAttribute(\"style\", \"background-color: #dee2e6\");\n    };\n\n    this.state = {\n      response: \"\",\n      sudoku: firstGrid,\n      selected: 0,\n      resetState: firstGrid\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"col-md-12 justify-content-md-center\",\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Sudoku, {\n      sudoku: this.state.sudoku,\n      selected: this.state.selected,\n      setSelected: this.setSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(NumberButtons, {\n      changeNumber: this.changeNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(ActionButtons, {\n      validateThenSolve: this.validateThenSolve,\n      clearGrid: this.clearGrid,\n      newRandomGrid: this.newRandomGrid,\n      resetGrid: this.resetGrid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), this.state.response === \"Loading...\" ? React.createElement(\"div\", {\n      class: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.response));\n  }\n\n}\n\nconst firstGrid = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''];\nexport default Index;","map":{"version":3,"sources":["/Users/ben/SudokuSolver/client/src/Components/Solver/index.js"],"names":["React","Sudoku","NumberButtons","ActionButtons","axios","Index","Component","constructor","props","validateThenSolve","post","grid","state","sudoku","then","res","data","solveOnServer","setState","response","newRandomGrid","get","resetState","setMessage","errorNum","setSelected","newSelected","document","getElementById","selected","setAttribute","changeNumber","number","newSudoku","clearGrid","map","elem","resetGrid","componentDidMount","firstGrid","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sudoku from './sudoku';\nimport NumberButtons from './numberButtons'\nimport ActionButtons from './actionButtons'\nimport axios from 'axios';\n\nclass Index extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.state = { \n            response: \"\" ,\n            sudoku: firstGrid,\n            selected: 0,\n            resetState: firstGrid,\n        };\n    }\n\n    validateThenSolve = () => {\n        axios.post(\"http://localhost:9000/api/validate\", {grid: this.state.sudoku})\n            .then(res => {\n                if (res.data)\n                    this.solveOnServer();\n                else\n                    this.setState({response: \"Invalid Grid\"})\n            });\n    }\n\n    newRandomGrid = () => {\n        axios.get(\"http://localhost:9000/api/random\")\n            .then(res => {\n                this.setState({sudoku: res.data})\n                this.setState({resetState: res.data})\n            });\n        \n    }\n    \n    solveOnServer = () => {\n        this.setState({response: \"Loading...\"})\n        this.setState({resetState: this.state.sudoku})\n        axios.post(\"http://localhost:9000/api/solver\", {grid: this.state.sudoku})\n            .then(res => {\n                this.setState({sudoku: res.data[0]})\n                this.setMessage(res.data[1])\n            });\n    }\n\n    setMessage = (errorNum) => {\n        if (errorNum === 0)\n            this.setState({response: \"Solution Found!\"})\n        else\n            this.setState({response: \"Could not find solution. Number of errors: \" + errorNum})\n    }\n\n    setSelected = (newSelected) => {\n        document.getElementById(\"i\" + this.state.selected).setAttribute(\"style\", \"background-color: none\")\n        this.setState({selected: newSelected})\n        document.getElementById(\"i\" + newSelected).setAttribute(\"style\", \"background-color: #dee2e6\")\n    }\n\n    changeNumber = (number) => {\n        var newSudoku = [...this.state.sudoku]\n        newSudoku[this.state.selected] = number\n        this.setState({sudoku: newSudoku})\n    }\n\n    clearGrid = () => {\n        var newSudoku = [...this.state.sudoku].map(elem => \" \")\n        this.setState({sudoku: newSudoku})\n    }\n\n    resetGrid = () => {\n        this.setState({sudoku: this.state.resetState})\n    }\n\n    componentDidMount = () => {\n        document.getElementById(\"i\" + this.state.selected).setAttribute(\"style\", \"background-color: #dee2e6\")\n    }\n\n    render()\n    {\n        return (\n            <div className=\"col-md-12 justify-content-md-center\" style={{textAlign: \"center\"}}>\n                <Sudoku sudoku={this.state.sudoku} selected={this.state.selected} setSelected={this.setSelected}/>\n                <NumberButtons changeNumber={this.changeNumber}/>\n                <ActionButtons \n                    validateThenSolve={this.validateThenSolve} \n                    clearGrid={this.clearGrid} \n                    newRandomGrid={this.newRandomGrid}\n                    resetGrid={this.resetGrid}\n                />\n                {this.state.response === \"Loading...\" ? <div class=\"spinner-border text-primary\" role=\"status\" /> : <p>{this.state.response}</p>}\n            </div>\n        );\n    }\n}\n\nconst firstGrid = [\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n    '','','','','','','','','',\n]\n\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}